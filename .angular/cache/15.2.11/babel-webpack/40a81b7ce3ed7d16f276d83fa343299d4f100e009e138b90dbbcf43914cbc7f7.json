{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jah/source/poc/nfc/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nexport class NfcReaderComponent {\n  constructor() {\n    this.message = 'Waiting for NFC tag...';\n  }\n  readNfcTag() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if ('NDEFReader' in window) {\n        try {\n          const ndef = new window.NDEFReader();\n          yield ndef.scan();\n          ndef.onreading = event => {\n            const decoder = new TextDecoder();\n            for (const record of event.message.records) {\n              if (record.recordType === 'text') {\n                _this.message = decoder.decode(record.data);\n              } else {\n                _this.message = 'NFC tag read, but it contains non-text data.';\n              }\n            }\n          };\n        } catch (error) {\n          _this.message = `Error: ${error.message}`;\n        }\n      } else {\n        _this.message = 'Web NFC is not supported on this device/browser.';\n      }\n    })();\n  }\n  static #_ = this.ɵfac = function NfcReaderComponent_Factory(t) {\n    return new (t || NfcReaderComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NfcReaderComponent,\n    selectors: [[\"app-nfc-reader\"]],\n    decls: 7,\n    vars: 1,\n    consts: [[3, \"click\"]],\n    template: function NfcReaderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"h1\");\n        i0.ɵɵtext(2, \"NFC Reader\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"p\");\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function NfcReaderComponent_Template_button_click_5_listener() {\n          return ctx.readNfcTag();\n        });\n        i0.ɵɵtext(6, \"Read NFC Tag\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.message);\n      }\n    },\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,kBAAkB;EAG7BC;IAFA,YAAO,GAAW,wBAAwB;EAE1B;EAEVC,UAAU;IAAA;IAAA;MACd,IAAI,YAAY,IAAIC,MAAM,EAAE;QAC1B,IAAI;UACF,MAAMC,IAAI,GAAG,IAAKD,MAAc,CAACE,UAAU,EAAE;UAC7C,MAAMD,IAAI,CAACE,IAAI,EAAE;UACjBF,IAAI,CAACG,SAAS,GAAIC,KAAU,IAAI;YAC9B,MAAMC,OAAO,GAAG,IAAIC,WAAW,EAAE;YACjC,KAAK,MAAMC,MAAM,IAAIH,KAAK,CAACI,OAAO,CAACC,OAAO,EAAE;cAC1C,IAAIF,MAAM,CAACG,UAAU,KAAK,MAAM,EAAE;gBAChC,KAAI,CAACF,OAAO,GAAGH,OAAO,CAACM,MAAM,CAACJ,MAAM,CAACK,IAAI,CAAC;eAC3C,MAAM;gBACL,KAAI,CAACJ,OAAO,GAAG,8CAA8C;;;UAGnE,CAAC;SACF,CAAC,OAAOK,KAAU,EAAE;UACnB,KAAI,CAACL,OAAO,GAAG,UAAUK,KAAK,CAACL,OAAO,EAAE;;OAE3C,MAAM;QACL,KAAI,CAACA,OAAO,GAAG,kDAAkD;;IAClE;EACH;EAAC;qBA1BUZ,kBAAkB;EAAA;EAAA;UAAlBA,kBAAkB;IAAAkB;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCR/BC,2BAAK;QACGA,0BAAU;QAAAA,iBAAK;QACnBA,yBAAG;QAAAA,YAAa;QAAAA,iBAAI;QACpBA,iCAA+B;QAAvBA;UAAA,OAASC,gBAAY;QAAA,EAAC;QAACD,4BAAY;QAAAA,iBAAS;;;QADjDA,eAAa;QAAbA,iCAAa","names":["NfcReaderComponent","constructor","readNfcTag","window","ndef","NDEFReader","scan","onreading","event","decoder","TextDecoder","record","message","records","recordType","decode","data","error","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\jah\\source\\poc\\nfc\\src\\app\\nfc-reader\\nfc-reader.component.ts","C:\\Users\\jah\\source\\poc\\nfc\\src\\app\\nfc-reader\\nfc-reader.component.html"],"sourcesContent":["// src/app/nfc-reader/nfc-reader.component.ts\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-nfc-reader',\n  templateUrl: './nfc-reader.component.html',\n  styleUrls: ['./nfc-reader.component.css']\n})\nexport class NfcReaderComponent {\n  message: string = 'Waiting for NFC tag...';\n\n  constructor() { }\n\n  async readNfcTag() {\n    if ('NDEFReader' in window) {\n      try {\n        const ndef = new (window as any).NDEFReader();\n        await ndef.scan();\n        ndef.onreading = (event: any) => {\n          const decoder = new TextDecoder();\n          for (const record of event.message.records) {\n            if (record.recordType === 'text') {\n              this.message = decoder.decode(record.data);\n            } else {\n              this.message = 'NFC tag read, but it contains non-text data.';\n            }\n          }\n        };\n      } catch (error: any) {\n        this.message = `Error: ${error.message}`;\n      }\n    } else {\n      this.message = 'Web NFC is not supported on this device/browser.';\n    }\n  }\n}\n","<div>\n    <h1>NFC Reader</h1>\n    <p>{{ message }}</p>\n    <button (click)=\"readNfcTag()\">Read NFC Tag</button>\n  </div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}